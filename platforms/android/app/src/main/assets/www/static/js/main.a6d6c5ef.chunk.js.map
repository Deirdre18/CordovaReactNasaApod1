{"version":3,"sources":["components/DateInput.js","components/Astronomy-Card.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","selected","date","onChange","changeDate","onClick","handleClick","AstronomyCard","data","title","url","hdurl","explanation","copyright","media_type","className","allowFullScreen","frameBorder","width","height","src","href","alt","class","renderContent","App","state","moment","photo","formatDate","year","month","day","dateFromInput","setState","getAstronomyCard","fetch","process","then","response","json","AstronomyCardData","randomDate","momentRandom","Container","id","Jumbotron","this","Component","Boolean","window","location","hostname","match","API_KEY","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8PAaeA,G,MARG,SAAAC,GAAK,OACrB,8CAEE,kBAAC,IAAD,CAAYC,SAAUD,EAAME,KAAMC,SAAUH,EAAMI,aAClD,4BAAQC,QAASL,EAAMM,aAAvB,mBCkDWC,EAvDO,SAACP,GAAW,IAAD,EAS5BA,EAAMQ,KAPFC,EAFwB,EAExBA,MACPC,EAH+B,EAG/BA,IACAC,EAJ+B,EAI/BA,MACAC,EAL+B,EAK/BA,YACAV,EAN+B,EAM/BA,KACAW,EAP+B,EAO/BA,UACAC,EAR+B,EAQ/BA,WAgCD,OACC,yBAAKC,UAAU,kBAEd,wBAAIA,UAAU,mBAAmBN,GAhCnC,WACC,OAAOK,GAEN,IAAK,QACJ,OACC,4BACAE,iBAAe,EACZC,YAAY,IACfC,MAAM,OACJC,OAAO,OAGTV,MAAM,WACHW,IAAKV,IAIT,IAAK,QACJ,OACC,uBAAGW,KAAMV,EAAOI,UAAU,2BAC1B,yBAAKK,IAAKV,EAAKY,IAAKb,EAAOc,MAAM,gBAIhC,QACC,OAAO,MASXC,GAED,2BAAIZ,GAEJ,8BAAOV,EAAP,KAAeW,K,iDCWHY,E,4MApDbC,MAAQ,CACNxB,KAAMyB,MACNC,MAAO,GACPrB,cAAe,GACfC,KAAK,I,EAOPqB,WAAa,SAAAF,GACX,IAAIG,EAAOH,EAAOG,OACdC,EAAQJ,EAAOI,QAAU,EACzBC,EAAML,EAAOzB,OACjB,MAAM,GAAN,OAAU4B,EAAV,YAAkBC,EAAlB,YAA2BC,I,EAG7B5B,WAAa,SAAA6B,GACX,EAAKC,SAAS,CAAChC,KAAM+B,IACrB,EAAKE,iBAAiB,EAAKN,WAAWI,K,EAGxCE,iBAAmB,SAAAjC,GACjBkC,MAAM,4CAAD,OAA6ClC,EAA7C,oBAA6DmC,6CAAoCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAiB,OAAI,EAAKP,SAAS,CAAC3B,cAAekC,Q,EAGlMnC,YAAc,WACZ,IAAIoC,EAAaC,IAAahB,MAAUA,IAAO,aAAc,eAC7D,EAAKO,SAAS,CAAChC,KAAMwC,IACrB,EAAKP,iBAAiB,EAAKN,WAAWa,K,kEAvBnB,IAAD,OAClBN,MAAM,+CAAD,OAAgDC,6CAAoCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAE,GAAI,OAAI,EAAKN,SAAS,CAAC3B,cAAeiC,S,+BA0BtK,OACE,6BACA,kBAACI,EAAA,EAAD,CAAWrB,MAAM,QAAQsB,GAAG,QAC1B,kBAACC,EAAA,EAAD,CAAWvB,MAAM,UAAUsB,GAAG,SAE5B,wBAAI9B,UAAU,eAAd,yCAIJ,kBAAC,EAAD,CAAWX,WAAY2C,KAAK3C,WAAYF,KAAM6C,KAAKrB,MAAMxB,KAAMI,YAAayC,KAAKzC,cAEjF,kBAAC,EAAD,CAAeE,KAAQuC,KAAKrB,MAAMnB,qB,GA9CtByC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAO,UAAKjB,4CAClBkB,QAAQC,IAAI,MAAOF,GAInBG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMC,c","file":"static/js/main.a6d6c5ef.chunk.js","sourcesContent":["//DateInput.js\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst DateInput = props => (\n  <div>\n    Select a Date:\n    <DatePicker selected={props.date} onChange={props.changeDate} />\n    <button onClick={props.handleClick}>Random photo</button>\n  </div>\n);\n\nexport default DateInput;\n","// Code taken from https://github.com/indreklasn/nasa-react-redux/blob/chapter-1/src/app/components/AstronomyContainer.js\n\nimport React from 'react';\n\nconst AstronomyCard = (props) => {\n\n\tconst { title,\n\t url,\n\t hdurl,\n\t explanation,\n\t date,\n\t copyright,\n\t media_type\n\t} = props.data;\n\n\tfunction renderContent() {\n\t\tswitch(media_type) {\n\n\t\t\tcase('video'):\n\t\t\t\treturn (\n\t\t\t\t\t<iframe\n\t\t\t\t\tallowFullScreen\n\t    \t\t\tframeBorder=\"0\"\n\t\t\t\t\twidth=\"100%\"\n  \t\t\t\t\theight=\"auto\"\n\t    \t\t\t/*height=\"520\"\n\t    \t\t\twidth=\"720\"*/\n\t\t\t\t\ttitle=\"NasaApod\"\n\t    \t\t\tsrc={url}>\n    \t\t\t</iframe>\n\t\t\t\t)\n\n\t\t\t\tcase('image'):\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<a href={hdurl} className=\"astronomy-image-wrapper\" >\n\t\t\t\t\t\t<img src={url} alt={title} class=\"responsive\"/>\n\t\t\t\t\t\t</a>\n\t\t    \t)\n\n\t\t    \tdefault:\n\t\t    \t\treturn null\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"astronomy-card\">\n\n\t\t\t<h6 className=\"astronomy-title\">{title}</h6>\n\n\t\t\t{renderContent()}\n\n\t\t\t<p>{explanation}</p>\n\n\t\t\t<span>{date}, {copyright}</span>\n\n\t\t</div>\n\t)\n}\n\nexport default AstronomyCard;","import React, {Component} from \"react\";\nimport DateInput from \"./components/DateInput.js\";\nimport AstronomyCard from './components/Astronomy-Card.js';\nimport Photo from \"./components/Photo.js\";\nimport moment from \"moment\";\nimport momentRandom from \"moment-random\";\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends Component {\n  state = {\n    date: moment(),\n    photo: \"\",\n    AstronomyCard: \"\",\n    data:[]\n  };\n\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_API_KEY_YT}`).then(response => response.json()).then(json => this.setState({AstronomyCard: json}));\n  }\n\n  formatDate = moment => {\n    let year = moment.year();\n    let month = moment.month() + 1;\n    let day = moment.date();\n    return `${year}-${month}-${day}`;\n  }\n\n  changeDate = dateFromInput => {\n    this.setState({date: dateFromInput});\n    this.getAstronomyCard(this.formatDate(dateFromInput));\n  };\n\n  getAstronomyCard = date => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=${process.env.REACT_APP_API_KEY_YT}`).then(response => response.json()).then(AstronomyCardData => this.setState({AstronomyCard: AstronomyCardData}));\n  };\n\n  handleClick = () => {\n    let randomDate = momentRandom(moment(), moment(\"06-16-1995\", \"MM-DD-YYYY\"));\n    this.setState({date: randomDate});\n    this.getAstronomyCard(this.formatDate(randomDate))\n  };\n\n  render() {\n    return (\n      <div>\n      <Container class=\"jumbo\" id=\"jumb\">\n        <Jumbotron class=\"jumbo01\" id=\"jumb1\">\n\n          <h1 className=\"text-center\">NASA's Astronomy Picture of the Day</h1>\n        </Jumbotron>\n      </Container>\n\n      <DateInput changeDate={this.changeDate} date={this.state.date} handleClick={this.handleClick}/>\n\n      <AstronomyCard data = {this.state.AstronomyCard}/>\n    </div>\n  );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst API_KEY =`${process.env.REACT_APP_API_KEY_YT}`;\nconsole.log(\"API\", API_KEY);\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}